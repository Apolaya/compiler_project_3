Nonterminals useless in grammar

    vector


Rules useless in grammar

   78 vector: '(' ')'


Rules useless in parser due to conflicts

   53 case: CASE INT_LITERAL ARROW error ';'


State 13 conflicts: 12 shift/reduce
State 59 conflicts: 1 shift/reduce
State 85 conflicts: 12 shift/reduce
State 124 conflicts: 12 shift/reduce
State 136 conflicts: 12 shift/reduce
State 137 conflicts: 12 shift/reduce
State 143 conflicts: 12 shift/reduce
State 152 conflicts: 3 reduce/reduce


Grammar

    0 $accept: function $end

    1 function: function_header optional_variable body

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';'
    3                | FUNCTION IDENTIFIER error ';'

    4 parameters: ε
    5           | parameter_list

    6 parameter_list: parameter
    7               | parameter_list ',' parameter
    8               | parameter_list error

    9 parameter: IDENTIFIER ':' type

   10 type: INTEGER
   11     | CHARACTER
   12     | REAL

   13 optional_variable: optional_variable variable
   14                  | optional_variable error
   15                  | ε

   16 variable: IDENTIFIER ':' type IS statement ';'
   17         | IDENTIFIER ':' LIST OF type IS list ';'

   18 list: '(' expressions ')'

   19 expressions: expressions_raw

   20 expressions_raw: expressions_raw ',' expression
   21                | expression

   22 body: BEGIN_ statements END ';'

   23 statements: statements statement_
   24           | statement_
   25           | ε

   26 statement_: statement ';'
   27           | error ';'

   28 statement: expression
   29          | if_statement
   30          | fold_statement
   31          | when_statement
   32          | switch_statement

   33 switch_statement: SWITCH expression IS cases ENDSWITCH
   34                 | SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH

   35 when_statement: WHEN condition ',' expression ':' expression

   36 fold_statement: FOLD direction operator operand ENDFOLD

   37 direction: LEFT
   38          | RIGHT

   39 operator: ADDOP
   40         | MULOP
   41         | RELOP

   42 operand: IDENTIFIER

   43 if_statement: IF condition THEN statements elsif_clauses optional_else ENDIF

   44 elsif_clauses: elsif_clauses elsif_clause
   45              | ε

   46 elsif_clause: ELSIF condition THEN statements

   47 optional_else: ELSE statements
   48              | ε

   49 cases: cases case
   50      | ε

   51 case: CASE INT_LITERAL ARROW statements
   52     | CASE error ARROW statements ';'
   53     | CASE INT_LITERAL ARROW error ';'

   54 condition: condition ANDOP relation
   55          | condition OROP logical_and
   56          | logical_and

   57 logical_and: logical_and ANDOP logical_not
   58            | logical_not

   59 logical_not: NOTOP logical_not
   60            | relation

   61 relation: '(' condition ')'
   62         | expression RELOP expression

   63 expression: expression ADDOP term
   64           | term

   65 term: term MULOP factor
   66     | term REMOP factor
   67     | factor

   68 factor: primary
   69       | primary EXPOP factor

   70 primary: NEGOP primary
   71        | '(' expression ')'
   72        | INT_LITERAL
   73        | CHAR_LITERAL
   74        | REAL_LITERAL
   75        | HEX_LITERAL
   76        | IDENTIFIER '(' expression ')'
   77        | IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 18 61 71 76
    ')' (41) 18 61 71 76
    ',' (44) 7 20 35
    ':' (58) 9 16 17 35
    ';' (59) 2 3 16 17 22 26 27 34 52 53
    error (256) 3 8 14 27 52 53
    ELSIF (258) 46
    ENDFOLD (259) 36
    FOLD (260) 36
    IF (261) 43
    THEN (262) 43 46
    ENDIF (263) 43
    BEGIN_ (264) 22
    CASE (265) 51 52 53
    CHARACTER (266) 11
    ELSE (267) 47
    END (268) 22
    ENDSWITCH (269) 33 34
    FUNCTION (270) 2 3
    INTEGER (271) 10
    IS (272) 16 17 33 34
    LIST (273) 17
    OF (274) 17
    OTHERS (275) 34
    RETURNS (276) 2
    SWITCH (277) 33 34
    WHEN (278) 35
    IDENTIFIER <iden> (279) 2 3 9 16 17 42 76 77
    ADDOP <oper> (280) 39 63
    MULOP <oper> (281) 40 65
    ANDOP <oper> (282) 54 57
    RELOP <oper> (283) 41 62
    ARROW <oper> (284) 34 51 52 53
    REMOP <oper> (285) 66
    EXPOP <oper> (286) 69
    NEGOP <oper> (287) 70
    OROP <oper> (288) 55
    NOTOP <oper> (289) 59
    INT_LITERAL <type> (290) 51 53 72
    CHAR_LITERAL <type> (291) 73
    HEX_LITERAL <type> (292) 75
    REAL <type> (293) 12
    REAL_LITERAL <type> (294) 74
    LEFT <type> (295) 37
    RIGHT <type> (296) 38


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    function <type> (48)
        on left: 1
        on right: 0
    function_header <type> (49)
        on left: 2 3
        on right: 1
    parameters <type> (50)
        on left: 4 5
        on right: 2
    parameter_list <type> (51)
        on left: 6 7 8
        on right: 5 7 8
    parameter <type> (52)
        on left: 9
        on right: 6 7
    type <type> (53)
        on left: 10 11 12
        on right: 2 9 16 17
    optional_variable <type> (54)
        on left: 13 14 15
        on right: 1 13 14
    variable <type> (55)
        on left: 16 17
        on right: 13
    list <type> (56)
        on left: 18
        on right: 17
    expressions <type> (57)
        on left: 19
        on right: 18
    expressions_raw <typeList> (58)
        on left: 20 21
        on right: 19 20
    body <type> (59)
        on left: 22
        on right: 1
    statements <type> (60)
        on left: 23 24 25
        on right: 22 23 43 46 47 51 52
    statement_ <type> (61)
        on left: 26 27
        on right: 23 24
    statement <type> (62)
        on left: 28 29 30 31 32
        on right: 16 26 34
    switch_statement <type> (63)
        on left: 33 34
        on right: 32
    when_statement <type> (64)
        on left: 35
        on right: 31
    fold_statement <type> (65)
        on left: 36
        on right: 30
    direction <value> (66)
        on left: 37 38
        on right: 36
    operator <oper> (67)
        on left: 39 40 41
        on right: 36
    operand <list> (68)
        on left: 42
        on right: 36
    if_statement <type> (69)
        on left: 43
        on right: 29
    elsif_clauses <type> (70)
        on left: 44 45
        on right: 43 44
    elsif_clause <type> (71)
        on left: 46
        on right: 44
    optional_else <type> (72)
        on left: 47 48
        on right: 43
    cases <type> (73)
        on left: 49 50
        on right: 33 34 49
    case <type> (74)
        on left: 51 52 53
        on right: 49
    condition <type> (75)
        on left: 54 55 56
        on right: 35 43 46 54 55 61
    logical_and <type> (76)
        on left: 57 58
        on right: 55 56 57
    logical_not <type> (77)
        on left: 59 60
        on right: 57 58 59
    relation <type> (78)
        on left: 61 62
        on right: 54 60
    expression <type> (79)
        on left: 63 64
        on right: 20 21 28 33 34 35 62 63 71 76
    term <type> (80)
        on left: 65 66 67
        on right: 63 64 65 66
    factor <type> (81)
        on left: 68 69
        on right: 65 66 67 69
    primary <type> (82)
        on left: 70 71 72 73 74 75 76 77
        on right: 68 69 70


State 0

    0 $accept: • function $end

    FUNCTION  shift, and go to state 1

    function         go to state 2
    function_header  go to state 3


State 1

    2 function_header: FUNCTION • IDENTIFIER parameters RETURNS type ';'
    3                | FUNCTION • IDENTIFIER error ';'

    IDENTIFIER  shift, and go to state 4


State 2

    0 $accept: function • $end

    $end  shift, and go to state 5


State 3

    1 function: function_header • optional_variable body

    $default  reduce using rule 15 (optional_variable)

    optional_variable  go to state 6


State 4

    2 function_header: FUNCTION IDENTIFIER • parameters RETURNS type ';'
    3                | FUNCTION IDENTIFIER • error ';'

    error       shift, and go to state 7
    IDENTIFIER  shift, and go to state 8

    RETURNS  reduce using rule 4 (parameters)

    parameters      go to state 9
    parameter_list  go to state 10
    parameter       go to state 11


State 5

    0 $accept: function $end •

    $default  accept


State 6

    1 function: function_header optional_variable • body
   13 optional_variable: optional_variable • variable
   14                  | optional_variable • error

    error       shift, and go to state 12
    BEGIN_      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14

    variable  go to state 15
    body      go to state 16


State 7

    3 function_header: FUNCTION IDENTIFIER error • ';'

    ';'  shift, and go to state 17


State 8

    9 parameter: IDENTIFIER • ':' type

    ':'  shift, and go to state 18


State 9

    2 function_header: FUNCTION IDENTIFIER parameters • RETURNS type ';'

    RETURNS  shift, and go to state 19


State 10

    5 parameters: parameter_list •
    7 parameter_list: parameter_list • ',' parameter
    8               | parameter_list • error

    error  shift, and go to state 20
    ','    shift, and go to state 21

    RETURNS  reduce using rule 5 (parameters)


State 11

    6 parameter_list: parameter •

    $default  reduce using rule 6 (parameter_list)


State 12

   14 optional_variable: optional_variable error •

    $default  reduce using rule 14 (optional_variable)


State 13

   22 body: BEGIN_ • statements END ';'

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    error         [reduce using rule 25 (statements)]
    FOLD          [reduce using rule 25 (statements)]
    IF            [reduce using rule 25 (statements)]
    END           reduce using rule 25 (statements)
    SWITCH        [reduce using rule 25 (statements)]
    WHEN          [reduce using rule 25 (statements)]
    IDENTIFIER    [reduce using rule 25 (statements)]
    NEGOP         [reduce using rule 25 (statements)]
    INT_LITERAL   [reduce using rule 25 (statements)]
    CHAR_LITERAL  [reduce using rule 25 (statements)]
    HEX_LITERAL   [reduce using rule 25 (statements)]
    REAL_LITERAL  [reduce using rule 25 (statements)]
    '('           [reduce using rule 25 (statements)]

    statements        go to state 34
    statement_        go to state 35
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 14

   16 variable: IDENTIFIER • ':' type IS statement ';'
   17         | IDENTIFIER • ':' LIST OF type IS list ';'

    ':'  shift, and go to state 45


State 15

   13 optional_variable: optional_variable variable •

    $default  reduce using rule 13 (optional_variable)


State 16

    1 function: function_header optional_variable body •

    $default  reduce using rule 1 (function)


State 17

    3 function_header: FUNCTION IDENTIFIER error ';' •

    $default  reduce using rule 3 (function_header)


State 18

    9 parameter: IDENTIFIER ':' • type

    CHARACTER  shift, and go to state 46
    INTEGER    shift, and go to state 47
    REAL       shift, and go to state 48

    type  go to state 49


State 19

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS • type ';'

    CHARACTER  shift, and go to state 46
    INTEGER    shift, and go to state 47
    REAL       shift, and go to state 48

    type  go to state 50


State 20

    8 parameter_list: parameter_list error •

    $default  reduce using rule 8 (parameter_list)


State 21

    7 parameter_list: parameter_list ',' • parameter

    IDENTIFIER  shift, and go to state 8

    parameter  go to state 51


State 22

   27 statement_: error • ';'

    ';'  shift, and go to state 52


State 23

   36 fold_statement: FOLD • direction operator operand ENDFOLD

    LEFT   shift, and go to state 53
    RIGHT  shift, and go to state 54

    direction  go to state 55


State 24

   43 if_statement: IF • condition THEN statements elsif_clauses optional_else ENDIF

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    NOTOP         shift, and go to state 56
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 57

    condition    go to state 58
    logical_and  go to state 59
    logical_not  go to state 60
    relation     go to state 61
    expression   go to state 62
    term         go to state 42
    factor       go to state 43
    primary      go to state 44


State 25

   33 switch_statement: SWITCH • expression IS cases ENDSWITCH
   34                 | SWITCH • expression IS cases OTHERS ARROW statement ';' ENDSWITCH

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    expression  go to state 63
    term        go to state 42
    factor      go to state 43
    primary     go to state 44


State 26

   35 when_statement: WHEN • condition ',' expression ':' expression

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    NOTOP         shift, and go to state 56
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 57

    condition    go to state 64
    logical_and  go to state 59
    logical_not  go to state 60
    relation     go to state 61
    expression   go to state 62
    term         go to state 42
    factor       go to state 43
    primary      go to state 44


State 27

   76 primary: IDENTIFIER • '(' expression ')'
   77        | IDENTIFIER •

    '('  shift, and go to state 65

    $default  reduce using rule 77 (primary)


State 28

   70 primary: NEGOP • primary

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    primary  go to state 66


State 29

   72 primary: INT_LITERAL •

    $default  reduce using rule 72 (primary)


State 30

   73 primary: CHAR_LITERAL •

    $default  reduce using rule 73 (primary)


State 31

   75 primary: HEX_LITERAL •

    $default  reduce using rule 75 (primary)


State 32

   74 primary: REAL_LITERAL •

    $default  reduce using rule 74 (primary)


State 33

   71 primary: '(' • expression ')'

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    expression  go to state 67
    term        go to state 42
    factor      go to state 43
    primary     go to state 44


State 34

   22 body: BEGIN_ statements • END ';'
   23 statements: statements • statement_

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    END           shift, and go to state 68
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    statement_        go to state 69
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 35

   24 statements: statement_ •

    $default  reduce using rule 24 (statements)


State 36

   26 statement_: statement • ';'

    ';'  shift, and go to state 70


State 37

   32 statement: switch_statement •

    $default  reduce using rule 32 (statement)


State 38

   31 statement: when_statement •

    $default  reduce using rule 31 (statement)


State 39

   30 statement: fold_statement •

    $default  reduce using rule 30 (statement)


State 40

   29 statement: if_statement •

    $default  reduce using rule 29 (statement)


State 41

   28 statement: expression •
   63 expression: expression • ADDOP term

    ADDOP  shift, and go to state 71

    $default  reduce using rule 28 (statement)


State 42

   64 expression: term •
   65 term: term • MULOP factor
   66     | term • REMOP factor

    MULOP  shift, and go to state 72
    REMOP  shift, and go to state 73

    $default  reduce using rule 64 (expression)


State 43

   67 term: factor •

    $default  reduce using rule 67 (term)


State 44

   68 factor: primary •
   69       | primary • EXPOP factor

    EXPOP  shift, and go to state 74

    $default  reduce using rule 68 (factor)


State 45

   16 variable: IDENTIFIER ':' • type IS statement ';'
   17         | IDENTIFIER ':' • LIST OF type IS list ';'

    CHARACTER  shift, and go to state 46
    INTEGER    shift, and go to state 47
    LIST       shift, and go to state 75
    REAL       shift, and go to state 48

    type  go to state 76


State 46

   11 type: CHARACTER •

    $default  reduce using rule 11 (type)


State 47

   10 type: INTEGER •

    $default  reduce using rule 10 (type)


State 48

   12 type: REAL •

    $default  reduce using rule 12 (type)


State 49

    9 parameter: IDENTIFIER ':' type •

    $default  reduce using rule 9 (parameter)


State 50

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type • ';'

    ';'  shift, and go to state 77


State 51

    7 parameter_list: parameter_list ',' parameter •

    $default  reduce using rule 7 (parameter_list)


State 52

   27 statement_: error ';' •

    $default  reduce using rule 27 (statement_)


State 53

   37 direction: LEFT •

    $default  reduce using rule 37 (direction)


State 54

   38 direction: RIGHT •

    $default  reduce using rule 38 (direction)


State 55

   36 fold_statement: FOLD direction • operator operand ENDFOLD

    ADDOP  shift, and go to state 78
    MULOP  shift, and go to state 79
    RELOP  shift, and go to state 80

    operator  go to state 81


State 56

   59 logical_not: NOTOP • logical_not

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    NOTOP         shift, and go to state 56
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 57

    logical_not  go to state 82
    relation     go to state 61
    expression   go to state 62
    term         go to state 42
    factor       go to state 43
    primary      go to state 44


State 57

   61 relation: '(' • condition ')'
   71 primary: '(' • expression ')'

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    NOTOP         shift, and go to state 56
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 57

    condition    go to state 83
    logical_and  go to state 59
    logical_not  go to state 60
    relation     go to state 61
    expression   go to state 84
    term         go to state 42
    factor       go to state 43
    primary      go to state 44


State 58

   43 if_statement: IF condition • THEN statements elsif_clauses optional_else ENDIF
   54 condition: condition • ANDOP relation
   55          | condition • OROP logical_and

    THEN   shift, and go to state 85
    ANDOP  shift, and go to state 86
    OROP   shift, and go to state 87


State 59

   56 condition: logical_and •
   57 logical_and: logical_and • ANDOP logical_not

    ANDOP  shift, and go to state 88

    ANDOP     [reduce using rule 56 (condition)]
    $default  reduce using rule 56 (condition)


State 60

   58 logical_and: logical_not •

    $default  reduce using rule 58 (logical_and)


State 61

   60 logical_not: relation •

    $default  reduce using rule 60 (logical_not)


State 62

   62 relation: expression • RELOP expression
   63 expression: expression • ADDOP term

    ADDOP  shift, and go to state 71
    RELOP  shift, and go to state 89


State 63

   33 switch_statement: SWITCH expression • IS cases ENDSWITCH
   34                 | SWITCH expression • IS cases OTHERS ARROW statement ';' ENDSWITCH
   63 expression: expression • ADDOP term

    IS     shift, and go to state 90
    ADDOP  shift, and go to state 71


State 64

   35 when_statement: WHEN condition • ',' expression ':' expression
   54 condition: condition • ANDOP relation
   55          | condition • OROP logical_and

    ANDOP  shift, and go to state 86
    OROP   shift, and go to state 87
    ','    shift, and go to state 91


State 65

   76 primary: IDENTIFIER '(' • expression ')'

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    expression  go to state 92
    term        go to state 42
    factor      go to state 43
    primary     go to state 44


State 66

   70 primary: NEGOP primary •

    $default  reduce using rule 70 (primary)


State 67

   63 expression: expression • ADDOP term
   71 primary: '(' expression • ')'

    ADDOP  shift, and go to state 71
    ')'    shift, and go to state 93


State 68

   22 body: BEGIN_ statements END • ';'

    ';'  shift, and go to state 94


State 69

   23 statements: statements statement_ •

    $default  reduce using rule 23 (statements)


State 70

   26 statement_: statement ';' •

    $default  reduce using rule 26 (statement_)


State 71

   63 expression: expression ADDOP • term

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    term     go to state 95
    factor   go to state 43
    primary  go to state 44


State 72

   65 term: term MULOP • factor

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    factor   go to state 96
    primary  go to state 44


State 73

   66 term: term REMOP • factor

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    factor   go to state 97
    primary  go to state 44


State 74

   69 factor: primary EXPOP • factor

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    factor   go to state 98
    primary  go to state 44


State 75

   17 variable: IDENTIFIER ':' LIST • OF type IS list ';'

    OF  shift, and go to state 99


State 76

   16 variable: IDENTIFIER ':' type • IS statement ';'

    IS  shift, and go to state 100


State 77

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';' •

    $default  reduce using rule 2 (function_header)


State 78

   39 operator: ADDOP •

    $default  reduce using rule 39 (operator)


State 79

   40 operator: MULOP •

    $default  reduce using rule 40 (operator)


State 80

   41 operator: RELOP •

    $default  reduce using rule 41 (operator)


State 81

   36 fold_statement: FOLD direction operator • operand ENDFOLD

    IDENTIFIER  shift, and go to state 101

    operand  go to state 102


State 82

   59 logical_not: NOTOP logical_not •

    $default  reduce using rule 59 (logical_not)


State 83

   54 condition: condition • ANDOP relation
   55          | condition • OROP logical_and
   61 relation: '(' condition • ')'

    ANDOP  shift, and go to state 86
    OROP   shift, and go to state 87
    ')'    shift, and go to state 103


State 84

   62 relation: expression • RELOP expression
   63 expression: expression • ADDOP term
   71 primary: '(' expression • ')'

    ADDOP  shift, and go to state 71
    RELOP  shift, and go to state 89
    ')'    shift, and go to state 93


State 85

   43 if_statement: IF condition THEN • statements elsif_clauses optional_else ENDIF

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    error         [reduce using rule 25 (statements)]
    ELSIF         reduce using rule 25 (statements)
    FOLD          [reduce using rule 25 (statements)]
    IF            [reduce using rule 25 (statements)]
    ENDIF         reduce using rule 25 (statements)
    ELSE          reduce using rule 25 (statements)
    SWITCH        [reduce using rule 25 (statements)]
    WHEN          [reduce using rule 25 (statements)]
    IDENTIFIER    [reduce using rule 25 (statements)]
    NEGOP         [reduce using rule 25 (statements)]
    INT_LITERAL   [reduce using rule 25 (statements)]
    CHAR_LITERAL  [reduce using rule 25 (statements)]
    HEX_LITERAL   [reduce using rule 25 (statements)]
    REAL_LITERAL  [reduce using rule 25 (statements)]
    '('           [reduce using rule 25 (statements)]

    statements        go to state 104
    statement_        go to state 35
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 86

   54 condition: condition ANDOP • relation

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 57

    relation    go to state 105
    expression  go to state 62
    term        go to state 42
    factor      go to state 43
    primary     go to state 44


State 87

   55 condition: condition OROP • logical_and

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    NOTOP         shift, and go to state 56
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 57

    logical_and  go to state 106
    logical_not  go to state 60
    relation     go to state 61
    expression   go to state 62
    term         go to state 42
    factor       go to state 43
    primary      go to state 44


State 88

   57 logical_and: logical_and ANDOP • logical_not

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    NOTOP         shift, and go to state 56
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 57

    logical_not  go to state 107
    relation     go to state 61
    expression   go to state 62
    term         go to state 42
    factor       go to state 43
    primary      go to state 44


State 89

   62 relation: expression RELOP • expression

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    expression  go to state 108
    term        go to state 42
    factor      go to state 43
    primary     go to state 44


State 90

   33 switch_statement: SWITCH expression IS • cases ENDSWITCH
   34                 | SWITCH expression IS • cases OTHERS ARROW statement ';' ENDSWITCH

    $default  reduce using rule 50 (cases)

    cases  go to state 109


State 91

   35 when_statement: WHEN condition ',' • expression ':' expression

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    expression  go to state 110
    term        go to state 42
    factor      go to state 43
    primary     go to state 44


State 92

   63 expression: expression • ADDOP term
   76 primary: IDENTIFIER '(' expression • ')'

    ADDOP  shift, and go to state 71
    ')'    shift, and go to state 111


State 93

   71 primary: '(' expression ')' •

    $default  reduce using rule 71 (primary)


State 94

   22 body: BEGIN_ statements END ';' •

    $default  reduce using rule 22 (body)


State 95

   63 expression: expression ADDOP term •
   65 term: term • MULOP factor
   66     | term • REMOP factor

    MULOP  shift, and go to state 72
    REMOP  shift, and go to state 73

    $default  reduce using rule 63 (expression)


State 96

   65 term: term MULOP factor •

    $default  reduce using rule 65 (term)


State 97

   66 term: term REMOP factor •

    $default  reduce using rule 66 (term)


State 98

   69 factor: primary EXPOP factor •

    $default  reduce using rule 69 (factor)


State 99

   17 variable: IDENTIFIER ':' LIST OF • type IS list ';'

    CHARACTER  shift, and go to state 46
    INTEGER    shift, and go to state 47
    REAL       shift, and go to state 48

    type  go to state 112


State 100

   16 variable: IDENTIFIER ':' type IS • statement ';'

    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    statement         go to state 113
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 101

   42 operand: IDENTIFIER •

    $default  reduce using rule 42 (operand)


State 102

   36 fold_statement: FOLD direction operator operand • ENDFOLD

    ENDFOLD  shift, and go to state 114


State 103

   61 relation: '(' condition ')' •

    $default  reduce using rule 61 (relation)


State 104

   23 statements: statements • statement_
   43 if_statement: IF condition THEN statements • elsif_clauses optional_else ENDIF

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    ELSIF  reduce using rule 45 (elsif_clauses)
    ENDIF  reduce using rule 45 (elsif_clauses)
    ELSE   reduce using rule 45 (elsif_clauses)

    statement_        go to state 69
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    elsif_clauses     go to state 115
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 105

   54 condition: condition ANDOP relation •

    $default  reduce using rule 54 (condition)


State 106

   55 condition: condition OROP logical_and •
   57 logical_and: logical_and • ANDOP logical_not

    ANDOP  shift, and go to state 88

    $default  reduce using rule 55 (condition)


State 107

   57 logical_and: logical_and ANDOP logical_not •

    $default  reduce using rule 57 (logical_and)


State 108

   62 relation: expression RELOP expression •
   63 expression: expression • ADDOP term

    ADDOP  shift, and go to state 71

    $default  reduce using rule 62 (relation)


State 109

   33 switch_statement: SWITCH expression IS cases • ENDSWITCH
   34                 | SWITCH expression IS cases • OTHERS ARROW statement ';' ENDSWITCH
   49 cases: cases • case

    CASE       shift, and go to state 116
    ENDSWITCH  shift, and go to state 117
    OTHERS     shift, and go to state 118

    case  go to state 119


State 110

   35 when_statement: WHEN condition ',' expression • ':' expression
   63 expression: expression • ADDOP term

    ADDOP  shift, and go to state 71
    ':'    shift, and go to state 120


State 111

   76 primary: IDENTIFIER '(' expression ')' •

    $default  reduce using rule 76 (primary)


State 112

   17 variable: IDENTIFIER ':' LIST OF type • IS list ';'

    IS  shift, and go to state 121


State 113

   16 variable: IDENTIFIER ':' type IS statement • ';'

    ';'  shift, and go to state 122


State 114

   36 fold_statement: FOLD direction operator operand ENDFOLD •

    $default  reduce using rule 36 (fold_statement)


State 115

   43 if_statement: IF condition THEN statements elsif_clauses • optional_else ENDIF
   44 elsif_clauses: elsif_clauses • elsif_clause

    ELSIF  shift, and go to state 123
    ELSE   shift, and go to state 124

    $default  reduce using rule 48 (optional_else)

    elsif_clause   go to state 125
    optional_else  go to state 126


State 116

   51 case: CASE • INT_LITERAL ARROW statements
   52     | CASE • error ARROW statements ';'
   53     | CASE • INT_LITERAL ARROW error ';'

    error        shift, and go to state 127
    INT_LITERAL  shift, and go to state 128


State 117

   33 switch_statement: SWITCH expression IS cases ENDSWITCH •

    $default  reduce using rule 33 (switch_statement)


State 118

   34 switch_statement: SWITCH expression IS cases OTHERS • ARROW statement ';' ENDSWITCH

    ARROW  shift, and go to state 129


State 119

   49 cases: cases case •

    $default  reduce using rule 49 (cases)


State 120

   35 when_statement: WHEN condition ',' expression ':' • expression

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    expression  go to state 130
    term        go to state 42
    factor      go to state 43
    primary     go to state 44


State 121

   17 variable: IDENTIFIER ':' LIST OF type IS • list ';'

    '('  shift, and go to state 131

    list  go to state 132


State 122

   16 variable: IDENTIFIER ':' type IS statement ';' •

    $default  reduce using rule 16 (variable)


State 123

   46 elsif_clause: ELSIF • condition THEN statements

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    NOTOP         shift, and go to state 56
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 57

    condition    go to state 133
    logical_and  go to state 59
    logical_not  go to state 60
    relation     go to state 61
    expression   go to state 62
    term         go to state 42
    factor       go to state 43
    primary      go to state 44


State 124

   47 optional_else: ELSE • statements

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    error         [reduce using rule 25 (statements)]
    FOLD          [reduce using rule 25 (statements)]
    IF            [reduce using rule 25 (statements)]
    ENDIF         reduce using rule 25 (statements)
    SWITCH        [reduce using rule 25 (statements)]
    WHEN          [reduce using rule 25 (statements)]
    IDENTIFIER    [reduce using rule 25 (statements)]
    NEGOP         [reduce using rule 25 (statements)]
    INT_LITERAL   [reduce using rule 25 (statements)]
    CHAR_LITERAL  [reduce using rule 25 (statements)]
    HEX_LITERAL   [reduce using rule 25 (statements)]
    REAL_LITERAL  [reduce using rule 25 (statements)]
    '('           [reduce using rule 25 (statements)]

    statements        go to state 134
    statement_        go to state 35
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 125

   44 elsif_clauses: elsif_clauses elsif_clause •

    $default  reduce using rule 44 (elsif_clauses)


State 126

   43 if_statement: IF condition THEN statements elsif_clauses optional_else • ENDIF

    ENDIF  shift, and go to state 135


State 127

   52 case: CASE error • ARROW statements ';'

    ARROW  shift, and go to state 136


State 128

   51 case: CASE INT_LITERAL • ARROW statements
   53     | CASE INT_LITERAL • ARROW error ';'

    ARROW  shift, and go to state 137


State 129

   34 switch_statement: SWITCH expression IS cases OTHERS ARROW • statement ';' ENDSWITCH

    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    statement         go to state 138
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 130

   35 when_statement: WHEN condition ',' expression ':' expression •
   63 expression: expression • ADDOP term

    ADDOP  shift, and go to state 71

    $default  reduce using rule 35 (when_statement)


State 131

   18 list: '(' • expressions ')'

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    expressions      go to state 139
    expressions_raw  go to state 140
    expression       go to state 141
    term             go to state 42
    factor           go to state 43
    primary          go to state 44


State 132

   17 variable: IDENTIFIER ':' LIST OF type IS list • ';'

    ';'  shift, and go to state 142


State 133

   46 elsif_clause: ELSIF condition • THEN statements
   54 condition: condition • ANDOP relation
   55          | condition • OROP logical_and

    THEN   shift, and go to state 143
    ANDOP  shift, and go to state 86
    OROP   shift, and go to state 87


State 134

   23 statements: statements • statement_
   47 optional_else: ELSE statements •

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    ENDIF  reduce using rule 47 (optional_else)

    statement_        go to state 69
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 135

   43 if_statement: IF condition THEN statements elsif_clauses optional_else ENDIF •

    $default  reduce using rule 43 (if_statement)


State 136

   52 case: CASE error ARROW • statements ';'

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    error         [reduce using rule 25 (statements)]
    FOLD          [reduce using rule 25 (statements)]
    IF            [reduce using rule 25 (statements)]
    SWITCH        [reduce using rule 25 (statements)]
    WHEN          [reduce using rule 25 (statements)]
    IDENTIFIER    [reduce using rule 25 (statements)]
    NEGOP         [reduce using rule 25 (statements)]
    INT_LITERAL   [reduce using rule 25 (statements)]
    CHAR_LITERAL  [reduce using rule 25 (statements)]
    HEX_LITERAL   [reduce using rule 25 (statements)]
    REAL_LITERAL  [reduce using rule 25 (statements)]
    ';'           reduce using rule 25 (statements)
    '('           [reduce using rule 25 (statements)]

    statements        go to state 144
    statement_        go to state 35
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 137

   51 case: CASE INT_LITERAL ARROW • statements
   53     | CASE INT_LITERAL ARROW • error ';'

    error         shift, and go to state 145
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    error         [reduce using rule 25 (statements)]
    FOLD          [reduce using rule 25 (statements)]
    IF            [reduce using rule 25 (statements)]
    CASE          reduce using rule 25 (statements)
    ENDSWITCH     reduce using rule 25 (statements)
    OTHERS        reduce using rule 25 (statements)
    SWITCH        [reduce using rule 25 (statements)]
    WHEN          [reduce using rule 25 (statements)]
    IDENTIFIER    [reduce using rule 25 (statements)]
    NEGOP         [reduce using rule 25 (statements)]
    INT_LITERAL   [reduce using rule 25 (statements)]
    CHAR_LITERAL  [reduce using rule 25 (statements)]
    HEX_LITERAL   [reduce using rule 25 (statements)]
    REAL_LITERAL  [reduce using rule 25 (statements)]
    '('           [reduce using rule 25 (statements)]

    statements        go to state 146
    statement_        go to state 35
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 138

   34 switch_statement: SWITCH expression IS cases OTHERS ARROW statement • ';' ENDSWITCH

    ';'  shift, and go to state 147


State 139

   18 list: '(' expressions • ')'

    ')'  shift, and go to state 148


State 140

   19 expressions: expressions_raw •
   20 expressions_raw: expressions_raw • ',' expression

    ','  shift, and go to state 149

    $default  reduce using rule 19 (expressions)


State 141

   21 expressions_raw: expression •
   63 expression: expression • ADDOP term

    ADDOP  shift, and go to state 71

    $default  reduce using rule 21 (expressions_raw)


State 142

   17 variable: IDENTIFIER ':' LIST OF type IS list ';' •

    $default  reduce using rule 17 (variable)


State 143

   46 elsif_clause: ELSIF condition THEN • statements

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    error         [reduce using rule 25 (statements)]
    ELSIF         reduce using rule 25 (statements)
    FOLD          [reduce using rule 25 (statements)]
    IF            [reduce using rule 25 (statements)]
    ENDIF         reduce using rule 25 (statements)
    ELSE          reduce using rule 25 (statements)
    SWITCH        [reduce using rule 25 (statements)]
    WHEN          [reduce using rule 25 (statements)]
    IDENTIFIER    [reduce using rule 25 (statements)]
    NEGOP         [reduce using rule 25 (statements)]
    INT_LITERAL   [reduce using rule 25 (statements)]
    CHAR_LITERAL  [reduce using rule 25 (statements)]
    HEX_LITERAL   [reduce using rule 25 (statements)]
    REAL_LITERAL  [reduce using rule 25 (statements)]
    '('           [reduce using rule 25 (statements)]

    statements        go to state 150
    statement_        go to state 35
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 144

   23 statements: statements • statement_
   52 case: CASE error ARROW statements • ';'

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    ';'           shift, and go to state 151
    '('           shift, and go to state 33

    statement_        go to state 69
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 145

   27 statement_: error • ';'
   53 case: CASE INT_LITERAL ARROW error • ';'

    ';'  shift, and go to state 152


State 146

   23 statements: statements • statement_
   51 case: CASE INT_LITERAL ARROW statements •

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    CASE       reduce using rule 51 (case)
    ENDSWITCH  reduce using rule 51 (case)
    OTHERS     reduce using rule 51 (case)

    statement_        go to state 69
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 147

   34 switch_statement: SWITCH expression IS cases OTHERS ARROW statement ';' • ENDSWITCH

    ENDSWITCH  shift, and go to state 153


State 148

   18 list: '(' expressions ')' •

    $default  reduce using rule 18 (list)


State 149

   20 expressions_raw: expressions_raw ',' • expression

    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    expression  go to state 154
    term        go to state 42
    factor      go to state 43
    primary     go to state 44


State 150

   23 statements: statements • statement_
   46 elsif_clause: ELSIF condition THEN statements •

    error         shift, and go to state 22
    FOLD          shift, and go to state 23
    IF            shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    IDENTIFIER    shift, and go to state 27
    NEGOP         shift, and go to state 28
    INT_LITERAL   shift, and go to state 29
    CHAR_LITERAL  shift, and go to state 30
    HEX_LITERAL   shift, and go to state 31
    REAL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 33

    ELSIF  reduce using rule 46 (elsif_clause)
    ENDIF  reduce using rule 46 (elsif_clause)
    ELSE   reduce using rule 46 (elsif_clause)

    statement_        go to state 69
    statement         go to state 36
    switch_statement  go to state 37
    when_statement    go to state 38
    fold_statement    go to state 39
    if_statement      go to state 40
    expression        go to state 41
    term              go to state 42
    factor            go to state 43
    primary           go to state 44


State 151

   52 case: CASE error ARROW statements ';' •

    $default  reduce using rule 52 (case)


State 152

   27 statement_: error ';' •
   53 case: CASE INT_LITERAL ARROW error ';' •

    CASE       reduce using rule 27 (statement_)
    CASE       [reduce using rule 53 (case)]
    ENDSWITCH  reduce using rule 27 (statement_)
    ENDSWITCH  [reduce using rule 53 (case)]
    OTHERS     reduce using rule 27 (statement_)
    OTHERS     [reduce using rule 53 (case)]
    $default   reduce using rule 27 (statement_)


State 153

   34 switch_statement: SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH •

    $default  reduce using rule 34 (switch_statement)


State 154

   20 expressions_raw: expressions_raw ',' expression •
   63 expression: expression • ADDOP term

    ADDOP  shift, and go to state 71

    $default  reduce using rule 20 (expressions_raw)
